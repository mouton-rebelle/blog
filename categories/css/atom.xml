<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: css | mouton.rebelle]]></title>
  <link href="http://blog.eg0.me//categories/css/atom.xml" rel="self"/>
  <link href="http://blog.eg0.me//"/>
  <updated>2012-07-29T16:43:28+02:00</updated>
  <id>http://blog.eg0.me//</id>
  <author>
    <name><![CDATA[Cédric Fontaine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[web is changing]]></title>
    <link href="http://blog.eg0.me//2012/03/25/web-is-changing/"/>
    <updated>2012-03-25T14:00:00+02:00</updated>
    <id>http://blog.eg0.me//2012/03/25/web-is-changing</id>
    <content type="html"><![CDATA[<p>J'adore mon métier. Le web est un univers captivant car en <strong>constante évolution</strong>, et nous oblige donc à toujours apprendre, se remettre en question, évoluer, tester de nouvelles techniques. Mais il y a des moments où je me sens un peu perdu devant les choix à faire, les solutions à adopter. C'est le cas cette semaine, en partie mais pas que à cause d'un excellent article de "<a href="http://www.alistapart.com/articles/the-best-browser-is-the-one-you-have-with-you">A List Apart</a>", aussi je prends mon clavier pour coucher tout ça par écrit et faire le tri dans ma tête. Merci à toi qui me lit, tu me diras combien je te dois à la fin de la séance.</p>

<!-- more -->


<h2>Les "nouvelles" contraintes</h2>

<p>Il y a 5 ans, quand je construisais un site web, les contraintes concernaient essentiellement la taille de l'écran de l'utilisateur, le poids des pages, et la compatibilité avec Internet Explorer. Aujourd'hui, IE9 est un bon navigateur et Microsoft se moque de son passé trouble dans une campagne de pub, tout le monde a du haut débit, les écrans de PCs sont suffisament grands pour qu'on arrête de se limiter à 1024px de large systématiquement, et le fait de devoir faire défiler la page pour avoir une information n'est plus considéré comme un pêché mortel.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/4DbgiOCTQts" frameborder="0" allowfullscreen></iframe>


<p>En revanche, 30% des accès au net se font désormais via autre chose qu'un ordinateur ; mobile, tablette, tv connectée, console de jeu... Les prévisions tablent sur 2014 comme année charnière où les courbes vont se croiser et où les PCs deviendront minoritaires.</p>

<p>Un site internet doit donc être consultable sur des écrans de tailles bien plus variées qu'avant, et le poids des pages qui avait un peu disparu de nos radars (ex : <a href="http://owni.fr">Owni.fr</a> : 2.5 Mo) redevient un point essentiel, avec notre couverture 3G aléatoire et nos plans Data souvent restreints.</p>

<p>Un autre problème concerne l'ergonomie ; le touch rend inopérentes certaines solutions que l'on considérait comme acquises, tel les menus déroulants au survol, ou les tooltips.</p>

<p>Dernier point, bien plus annecdotique, les écrans Retina d'Apple, d'abord sur iPhone et maintenant sur iPad, requièrent dans l'idéal des images deux fois plus grosses pour un rendu optimal. Si la concurrence suit le mouvement et si les écrans à haute densité deviennent monnaie courante, il faudra également prendre en compte ce facteur.</p>

<h2>Les mauvaises habitudes</h2>

<p>Je lisais la semaine dernière un article intitulé "Stop paying your jQuery tax". jQuery est en effet la librairie javascript la plus utilisée, car elle est simple et propose de nombreux plugins de qualité. Seulement dans le meilleur des cas, c'est déjà 30ko de perdus. Quand on rajoute un ou deux plugins, on peut vite faire exploser les temps de chargement/rendu sur mobile, pour un ou deux gadgets souvent dispensables, ou une fonction qui aurait pu être codée en quelques lignes de code.</p>

<p>Google Analytics rentre également dans cette case ; avec une requête en bonus sur chaque page du site et 13ko de script, on peut se demander si un retour à l'analyse des logs Apache n'est pas souhaitable...</p>

<p>Les webfonts, la solution que tout designer attendait et qui permet d'afficher autre chose que de l'Arial ou du Times sur le web sans devoir passer par une image, sont enfin supportés par tous les navigateurs. Même si le rendu n'est pas toujours idéal (wink wink Windows XP), cette fonctionnalité devient très populaire. Et pose là encore un problème de poids et de requêtes. Sur ce blog qui utilise 2 typos, c'est 5 requêtes qui partent, sur 2 domaines, pour un poids de près de 80ko...</p>

<p>Enfin, la plupart des gros sites se doivent de proposer  des boutons de partage au minimun via Facebook et Twitter, car c'est de plus en plus des réseaux sociaux qui génèrent du traffic. On rajoute encore deux scripts, et deux noms de domaine à résoudre.</p>

<h2>Les solutions</h2>

<h3>Un site mobile ? Un site fluide ?</h3>

<p>Il y a deux approches au problème du mobile ; soit faire un site à part dédié au mobile, comme <a href="http://mobile.lemonde.fr/">le monde</a>, soit faire un site qui va s'adapter à l'appareil qui le consulte.</p>

<p>Dans le premier cas, on peut prendre une approche très différente sur la structuration de l'information et sur l'ergonomie, et optimiser le poids des pages est plus simple. En revanche, on se retrouve avec d'autres soucis :
- deux sites à maintenir
- des informations parfois différentes sur les deux sites, pouvant frustrer l'internaute
- les liens partagés risquent de renvoyer l'internaute sur une version mal adaptée ; exemple, il m'arrive souvent de tomber sur des liens vers la version mobile du Monde dans ma timeline Twitter, sur un 26" ça pique un peu les yeux.</p>

<p>Dans le second cas, il faut faire appel aux medias queries pour que le site s'adapte à la taille de l'écran. C'est notamment le cas de ce blog ; si vous consultez depuis un mobile ou si vous redimensionnez votre navigateur, la partie latérale va se retrouver en pied de page. C'est à mon sens bien plus élégant, et polyvalent (notebook, personnes n'aimant pas avoir leur navigateur en plein écran, etc...) mais c'est aussi bien plus compliqué.
Internet Explorer ne supporte cette fonctionnalité que depuis la version 9, il faut donc faire appel à <a href="http://filamentgroup.com/lab/respondjs_fast_css3_media_queries_for_internet_explorer_6_8_and_more/">respond.js</a> pour les boulets.</p>

<p>Ecrire une CSS propre en utilisant les medias queries peut vite être un casse-tête, en tout cas lorsqu'on débute. La philosophie "mobile first", qui consiste à faire un site au poil pour mobile, et d'enrichir ensuite progressivement pour les écrans plus larges est probablement la bonne voie, mais c'est une habitude à prendre, et ça n'a rien d'évident lorsqu'on a passé des années à designer pour du 1024. Et si on échoue à faire une CSS bien structurée, on se retrouvera avec un bidule tout aussi difficile à maintenir que les deux sites précédement cités.</p>

<h3>Les images</h3>

<p>Charger une image en 1024px sur un smartphone n'a pas vraiment de sens ; en revanche, sur un desktop c'est de plus en plus courant. <br/>
A ce niveau, la solution est plus simple. Le W3C est en train de plancher sur le sujet, et envisagerait un nouveau markup pour spécifier plusieurs versions d'un visuel.<br/>
En attendant, la solution consiste à charger par défaut la version basse resolution, et une fois la page web chargée, si jamais la taille de l'écran est supérieure à x pixels, on la remplace par la version haute résolution. L'inconvénient est une requête inutile sur les desktops, mais ça tombe bien, à cet endroit la bande passante ne manque pas trop.</p>

<h3>Le javascript</h3>

<p>C'est plus délicat ici, car je me pose beaucoup de questions d'ergonomie à ce sujet. Les carrousels, qu'on voit partout, sont-il vraiment pertinents ? Quelle alternative aux lightboxs et aux tooltips sur iPad ?</p>

<p>Dans tous les cas, je vais arrêter d'utiliser systématiquement jQuery ; pour une partie des sites que je développe, <a href="http://ender.no.de/">Ender.js</a> est largement suffisant. La syntaxe est pratiquement identique, et le système de packages intelligents permet de facilement ajouter ou retirer un module, et donc de ne mettre que l'indispensable.</p>

<h2>Puisqu'il faut conclure</h2>

<p>J'ai survolé plein de thèmes différents dans cet article brouillon, mais je commence à y voir plus clair malgré tout ; aujourd'hui plus que jamais, il faut se concentrer sur le contenu, l'information, et il faut optimiser au maximum le poids des pages et le nombre de requêtes. Je pense qu'avec ces deux idées toujours en tête lorsqu'on designe un site, on devrait s'en sortir sans trop de casse. Non ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dire oui aux CSS compilées]]></title>
    <link href="http://blog.eg0.me//2010/11/04/dire-oui-aux-css-compilees/"/>
    <updated>2010-11-04T17:46:00+01:00</updated>
    <id>http://blog.eg0.me//2010/11/04/dire-oui-aux-css-compilees</id>
    <content type="html"><![CDATA[<p>J'ai longtemps hésité à franchir le pas, ne trouvant pas vraiment de solutions à mon goût ; certaines étaient trop lourdes pour mes besoins, d'autres demandaient beaucoup de configuration à chaque nouveau projet.... jusqu'au mois dernier, où j'ai découvert <a href="http://compass-style.org">Compass</a>.</p>

<!-- more -->


<p>Compass est un outil qui interprète le langage SASS, version évoluée des CSS utilisé avec Ruby notamment ; c'est une gem Ruby, donc pour
l'installer sous OSX, il suffit de taper sudo gem install Compass, et hop,
vous êtes prêt. Le site explique la configuration de base, en gros il suffit
de faire un dossier scss, où vous créerez vos styles, et dans ce dossier un
fichier config.rb qui va donner les chemins d'accès au vrai dossier css, où
Compass ira créer des fichiers CSS normaux, en compilant le où les fichiers
.scss. Une fois la configuration terminée, vous lancez la commande compass
watch /chemin/vers/mon/dossier/scss/ et vous êtes bon pour redécouvrir les
css.</p>

<p>Toute bonne feuille de style commence par un reset. Comment ça Kevin, tu sais
pas ce qu'est un reset ? Boulet... Il s'agit juste de
remettre la mise en page à zéro, pour éviter d'avoir des différences dues aux
styles par défauts des différents navigateurs. Auparavant, je reprenais le
<a href="http://meyerweb.com/eric/thoughts/2007/05/01%0A/reset-reloaded/">Css Reset Reloaded d'Eric</a>. Maintenant, je commence juste mon fichier scss par @import
'compass/reset';</p>

<p>Le deuxième problème qu'on rencontre souvent en CSS, c'est l'absence de
variables. Pour les couleurs, notamment, devoir récupérer à chaque fois le bon
code couleur est une plaie. Plus maintenant, avec Compass :</p>

<p><code>sass Les variables dans Sass  
$couleur_titre: #C2FFDD;
h1{
  color:$couleur_titre;
  border-bottom:2px solid darken($couleur_titre,20%);
}
</code></p>

<p>On peut donc très facilement définir les couleurs utilisés, et les faire
varier grace aux fonctions darken et lighten ; De la même
manière, on peut définir une variable $marge, et s'en servir ensuite, avec des
maths si l'on a envie (ex : width: 600-$marge*2 px;)</p>

<p>Autre petite joyeuseté, le nesting (qui doit se traduire par imbrication), qui
permet de taper beaucoup moins de code, et d'être plus
lisible :</p>

<p>``` sass Nesting dans Sass<br/>
a{
  text-decoration:none;
  color:red;
  font-size:1.1em;
  span{</p>

<pre><code>display:none;
</code></pre>

<p>  }
  &amp;:hover,&amp;:visited:hover{</p>

<pre><code>text-decoration:underline;
</code></pre>

<p>  }
  &amp;:visited{</p>

<pre><code>color:darken(red,30%);
</code></pre>

<p>  }
}
```</p>

<p>Les éléments imbriqués sont par défaut les descendants (dans l'exemple ci-
dessus, on masque les spans présents dans des balises a, ce qui reviendrait à
écrire une autre règle span a), sauf quand on précède la règle d'un &amp;, auquel
cas on précise juste la nature de l'élément (ici, on indique que les liens
visités sont plus sombre, ce qui revient à une nouvelle règle a:visited).
C'est très agréable de coder ainsi, en revanche il faut prendre garde à ne pas
abuser de cette facilité, qui peut vite conduire à ne pas bien écrire ces
feuilles de style, en ayant des doublons, des règles "trop précises" et donc
non réutilisables.</p>

<p>Compass est également livré avec un bundle CSS3, qui vous fera gagner beaucoup
de temps si vous commencez à faire joujou avec les arrondis, ombres et
dégradés... Il s'importe au début du fichier css avec un @import
'compass/css3', et s'utilise de manière presque intuitive après quelques
heures :</p>

<p><code>sass mixins css3 dans Sass    
.bloc{
  @include border-radius(8px);
  @include box-shadow();
}
</code></p>

<p>En deux lignes de code, on a défini que notre bloc serait arrondi, avec une
ombre. Lorsqu'il compile ces deux lignes, Compass les convertis en reprenant
tous les attributs spécifiques à chaque navigateur (-moz-border-radius,
-webkit-border-radius, etc...). Pas de coin arrondi pour IE, mais l'ombre est
reprise avec le "filter" propriétaire. Si vous hésitez à utiliser les CSS3,
regardez cette vidéo sur le <a href="http://www.youtube.com/watch?v=_nbWikK2nHY">progressive enhancement</a> :
c'est assez inspirant.</p>

<p>Pour aller encore plus loin avec Compass, il me faut évoquer la possibilité de
créer des mixins, petites fonctions réutilisables pour habiller un élément. Le
dernier site sur lequel j'ai travaillé avait une dizaine de bloc avec un fond
dégradé, d'une couleur différente à chaque fois.</p>

<p><code>sass mixins = fonctions
@mixin degnews($basecolor){
  color:#000;
   background:$basecolor;
  @include linear-gradient(color-stops(lighten($basecolor,20%), $basecolor 50%,darken($basecolor,10%) 51%, darken($basecolor,25%)));
}
</code></p>

<p>Une fois la fonction définie, vous pouvez la réutiliser à
l'envie :</p>

<p><code>sass utiliser un mixin
.bloc1{
  @include degnews(#FF3300);
}
</code></p>

<p>Pour conclure sur les possibilités de malade offertes par ce petit bijou, il
existe un plugin, <a href="http://www.hagenburger.net/BLOG/Lemonade-CSS-Sprites-for-Sass-Compass.html">Lemonade</a>, qui permet de générer automatiquement des sprites ; vous découpez vos images sans vous poser trop de
questions, en PNG transparent, et ensuite vous appelez simplement background:
sprite-image("sprites/arrow.png"); Lemonade se charge de créer une seule image
avec toutes les petites images qui utilisent cette fonction, et de les placer
convenablement. En pratique c'est un peu plus complexe, mais à peine, et
tellement plus simple que de le faire à la main...</p>

<p>Je ne vois pas vraiment de raison de se priver de cet outil, c'est au final
assez transparent, et le gain en productivité (et en plaisir) est plus que
conséquent. Si vous n'êtes pas encore convaincus, regardez la vidéo sur le
site de <a href="http://compass-style.org">Compass</a>.</p>
]]></content>
  </entry>
  
</feed>
